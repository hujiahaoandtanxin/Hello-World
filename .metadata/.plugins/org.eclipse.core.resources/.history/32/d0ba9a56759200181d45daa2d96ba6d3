package com.hujiahao.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.hujiahao.model.Msg;
import com.hujiahao.model.User;
import com.hujiahao.model.Wireman;
import com.hujiahao.service.WiremanService;

@Controller
public class WiremanController {
	
	@Autowired
	WiremanService wiremanService;
	
	/**
	 * 通过openid来查询电工个人信息
	 * @param openid
	 * @return
	 */
	@RequestMapping(value="/selectWiremanByOpenid",method=RequestMethod.GET)
	@ResponseBody
	public List<Wireman> selectWiremanByOpenid(@RequestParam("openid") String openid){
	List<Wireman> wiremanList = wiremanService.selectWiremanByOpenid(openid);
		return wiremanList;
		
	}
	
	/**
	 * 通过小程序拿到的openid来更新电工名字信息
	 * @param openid
	 * @return
	 */
	@RequestMapping(value = "/updateWiremanByOpenid", method = RequestMethod.GET)
	@ResponseBody//默认把对象返回---变成json字符串
	public Msg updateUserByOpenid(String username,@RequestParam("openid") String openid,Wireman wireman) {
		wireman.setUsername(username);
		wireman.setOpenId(openid);
		int result = wiremanService.updateByOpenIdSelective(wireman);
		System.out.println(result);
		return Msg.success();
	}
	
	/**
	 * 通过小程序拿到的openid来更新电工密码信息
	 * @param openid
	 * @return
	 */
	@RequestMapping(value = "/updateWiremanPwdByOpenid", method = RequestMethod.GET)
	@ResponseBody//默认把对象返回---变成json字符串
	public Msg updateWiremanPwdByOpenid(String password,@RequestParam("openid") String openid,Wireman wireman) {
		wireman.setPassword(password);
		wireman.setOpenId(openid);
		int result = wiremanService.updateByOpenIdSelective(wireman);
		System.out.println(result);
		return Msg.success();
	}
	
	/**
	 * 通过小程序拿到的openid来更新电工性别信息
	 * @param openid
	 * @return
	 */
	@RequestMapping(value = "/updateWiremanSexByOpenid", method = RequestMethod.GET)
	@ResponseBody//默认把对象返回---变成json字符串
	public Msg updateWiremanSexByOpenid(String sex,@RequestParam("openid") String openid,Wireman wireman) {
		wireman.setSex(sex);
		wireman.setOpenId(openid);
		int result = wiremanService.updateByOpenIdSelective(wireman);
		System.out.println(result);
		return Msg.success();
	}
	
	/**
	 * 通过小程序拿到的openid来更新电工手机信息
	 * @param openid
	 * @return
	 */
	@RequestMapping(value = "/updateWiremanPhoneByOpenid", method = RequestMethod.GET)
	@ResponseBody//默认把对象返回---变成json字符串
	public Msg updateWiremanPhoneByOpenid(String phone,@RequestParam("openid") String openid,Wireman wireman) {
		wireman.setMobilePhone(phone);
		wireman.setOpenId(openid);
		int result = wiremanService.updateByOpenIdSelective(wireman);
		System.out.println(result);
		return Msg.success();
	}
	
	/**
	 * 通过小程序拿到的openid来更新电工身份证信息
	 * @param openid
	 * @return
	 */
	@RequestMapping(value = "/updateWiremanIdtByOpenid", method = RequestMethod.GET)
	@ResponseBody//默认把对象返回---变成json字符串
	public Msg updateWiremanIdtByOpenid(String idcard,@RequestParam("openid") String openid,Wireman wireman) {
		
		wireman.setIdcard(idcard);
		wireman.setOpenId(openid);
		int result = wiremanService.updateByOpenIdSelective(wireman);
		System.out.println(result);
		return Msg.success();
	}
	
	private static final Logger logger = LoggerFactory.getLogger(UploadController.class);

	
	@RequestMapping(value = "/file", method = RequestMethod.POST)
	@ResponseBody//默认把对象返回---变成json字符串
	public Msg uploadFile(@RequestParam(value="file")byte[] file ,Wireman wireman,HttpServletRequest request) {
				
		 //获取文件需要上传到的路径
        String path = request.getRealPath("/upload") + "/";
        File dir = new File(path);
        if (!dir.exists()) {
            dir.mkdir();
        }
        logger.debug("path=" + path);

        request.setCharacterEncoding("utf-8");  //设置编码
        //获得磁盘文件条目工厂
        DiskFileItemFactory factory = new DiskFileItemFactory();

        //如果没以下两行设置的话,上传大的文件会占用很多内存，
        //设置暂时存放的存储室,这个存储室可以和最终存储文件的目录不同
        /**
         * 原理: 它是先存到暂时存储室，然后再真正写到对应目录的硬盘上，
         * 按理来说当上传一个文件时，其实是上传了两份，第一个是以 .tem 格式的
         * 然后再将其真正写到对应目录的硬盘上
         */
        factory.setRepository(dir);
        //设置缓存的大小，当上传文件的容量超过该缓存时，直接放到暂时存储室
        factory.setSizeThreshold(1024 * 1024);
        //高水平的API文件上传处理
        ServletFileUpload upload = new ServletFileUpload(factory);
        try {
            List<FileItem> list = upload.parseRequest(request);
            FileItem picture = null;
            for (FileItem item : list) {
                //获取表单的属性名字
                String name = item.getFieldName();
                //如果获取的表单信息是普通的 文本 信息
                if (item.isFormField()) {
                    //获取用户具体输入的字符串
                    String value = item.getString();
                    request.setAttribute(name, value);
                    logger.debug("name=" + name + ",value=" + value);
                } else {
                    picture = item;
                }
            }

            //自定义上传图片的名字为userId.jpg
            String fileName = request.getAttribute("userId") + ".jpg";
            String destPath = path + fileName;
            logger.debug("destPath=" + destPath);

            //真正写到磁盘上
            File file = new File(destPath);
            OutputStream out = new FileOutputStream(file);
            InputStream in = picture.getInputStream();
            int length = 0;
            byte[] buf = new byte[1024];
            // in.read(buf) 每次读到的数据存放在buf 数组中
            while ((length = in.read(buf)) != -1) {
                //在buf数组中取出数据写到（输出流）磁盘上
                out.write(buf, 0, length);
            }
            in.close();
            out.close();
        } catch (FileUploadException e1) {
            logger.error("", e1);
        } catch (Exception e) {
            logger.error("", e);
        }


        PrintWriter printWriter = response.getWriter();
        response.setContentType("application/json");
        response.setCharacterEncoding("utf-8");
        HashMap<String, Object> res = new HashMap<String, Object>();
        res.put("success", true);
        printWriter.write(JSON.toJSONString(res));
        printWriter.flush();
					
				return Msg.success();
		
	}
}
